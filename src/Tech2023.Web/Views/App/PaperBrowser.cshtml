@model BrowsePapersViewModel;
@{
    string subjectName = StringHelpers.ToTitleCase(Model.SelectedSubject.Name);
    string subjectSource = Html.DisplayTextFor(s => s.SelectedSubject.Source);
    string yearLevel = Curriculum.ToString(Model.SelectedSubject.Level, Model.SelectedSubject.Source);

    CurriculumSource source = Model.SelectedSubject.Source;

    ViewData["Title"] = $"Browse {yearLevel} {subjectName}";
}

@await Component.InvokeAsync(SidebarViewComponent.Name, Model)
@* TODO: Make sidebar have relevant items *@

<div id="paper-browser" class="max-h-full pb-[var(--sidebar-search-height,_0rem)] md:pb-0 overflow-y-scroll">
    <h1 class="m-2 mx-3">Papers for @subjectName (@subjectSource)</h1>

    <div id="papers" class="w-full overflow-x-hidden pr-1">
        @if (source == CurriculumSource.Ncea)
        {
            <partial name="_NceaDisplay" model="Model.SelectedSubject" />
        }
        else if (source == CurriculumSource.Cambridge)
        {
            <partial name="_CambridgeDisplay" model="Model.SelectedSubject" />
        }
    </div>
</div>