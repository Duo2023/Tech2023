{"version":3,"sources":["webpack://aspnetValidation/webpack/universalModuleDefinition","webpack://aspnetValidation/webpack/bootstrap","webpack://aspnetValidation/./src/index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","nullLogger","warn","globalThis","console","log","_","getRelativeFormElement","elementName","selector","realSelector","substr","dotLocation","lastIndexOf","relativeElementName","relativeElement","document","getElementsByName","required","element","params","Boolean","stringLength","min","parseInt","length","max","compare","other","otherElement","range","val","parseFloat","isNaN","regex","pattern","RegExp","test","email","creditcard","cDigit","nCheck","nDigit","bEven","replace","charAt","url","lowerCaseValue","toLowerCase","indexOf","phone","remote","fieldSelectors","additionalfields","split","fields","fieldSelector","fieldName","fieldElement","encodedParams","encodedParam","encodeURIComponent","push","payload","join","Promise","ok","reject","request","XMLHttpRequest","type","postData","FormData","append","open","setRequestHeader","send","onload","e","status","data","JSON","parse","responseText","statusText","onerror","logger","providers","messageFor","elementUIDs","elementByUID","formInputs","validators","elementEvents","summary","debounce","allowHiddenFields","validateForm","form","callback","formUID","getElementUID","formValidationEvent","undefined","preValidate","submitEvent","preventDefault","stopImmediatePropagation","handleValidated","success","submitValidForm","focusFirstInvalid","newEvent","SubmitEvent","dispatchEvent","submit","invalidFormInputUIDs","filter","uid","firstInvalid","focus","isValid","prevalidate","isFieldValid","field","closest","fieldUID","ValidationInputCssClassName","ValidationInputValidCssClassName","ValidationMessageCssClassName","ValidationMessageValidCssClassName","ValidationSummaryCssClassName","ValidationSummaryValidCssClassName","this","addProvider","addMvcProviders","mvc","MvcValidationProviders","scanMessages","validationMessageElements","Array","from","querySelectorAll","hasAttribute","getAttribute","spans","parseDirectives","attributes","directives","validationAtributes","cut","a","parameters","keys","Q","directive","error","pcut","pvalue","pkey","guid4","Math","random","toString","node","x","getFormValidationTask","formInputUIDs","resolve","formValidators","inputUID","tasks","map","all","then","result","every","shouldValidate","trackFormInput","validating","cb","validate","validationEvent","CustomEvent","detail","valid","catch","finally","addEventListener","input","classList","contains","remove","innerHTML","renderSummary","addInput","createValidator","delay","clearTimeout","setTimeout","isDropdown","tagName","validateEvent","dataset","valEvent","scanInputs","inputs","createSummaryDOM","ul","createElement","li","appendChild","summaryElements","shadow","stringify","sort","renderedSummaryJSON","swapClasses","cloneNode","addError","message","removeError","isHidden","provider","resolution","offsetWidth","offsetHeight","getClientRects","addClass","removeClass","add","bootstrap","options","body","init","scan","watch","readyState","observer","MutationObserver","mutations","forEach","mutation","observed","observe","childList","subtree","addedNodes","HTMLElement","target","oldValue","newValue","attributeName"],"mappings":"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","file":"aspnet-validation.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"aspnetValidation\"] = factory();\n\telse\n\t\troot[\"aspnetValidation\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * A simple IDictionary<string, string>\n */\nexport interface StringKeyValuePair {\n    [key: string]: string\n}\n\n/**\n * A duplex key-value pair for an element, by GUID or its DOM object reference.\n */\ninterface ElementUID {\n    node: Element,\n    uid: string;\n}\n\n/**\n * A simple logging interface that mirrors the Console object.\n */\nexport interface Logger {\n    log(message: string, ...args: any[]): void;\n    warn(message: string, ...args: any[]): void;\n}\n\nconst nullLogger = new (class implements Logger {\n    log(_: string, ..._args: any[]): void { }\n    warn = globalThis.console.warn;\n})();\n\n/**\n * Parameters passed into validation providers from the element attributes.\n * error property is read from data-val-[Provider Name] attribute.\n * params property is populated from data-val-[Provider Name]-[Parameter Name] attributes.\n */\nexport interface ValidationDirectiveBindings {\n    error: string,\n    params: StringKeyValuePair\n}\n\n/**\n * A key-value pair describing what validations to enforce to an input element, with respective parameters.\n */\nexport type ValidationDirective = {\n    [key: string]: ValidationDirectiveBindings\n};\n\n/**\n * Validation plugin signature with multitype return.\n * Boolean return signifies the validation result, which uses the default validation error message read from the element attribute.\n * String return signifies failed validation, which then will be used as the validation error message.\n * Promise return signifies asynchronous plugin behavior, with same behavior as Boolean or String.\n */\nexport type ValidationProvider = (value: string, element: HTMLInputElement, params: StringKeyValuePair) => boolean | string | Promise<boolean | string>;\n\n/**\n * Callback to receive the result of validating a form.\n */\nexport type ValidatedCallback = (success: boolean) => void;\n\n/**\n * A callback method signature that kickstarts a new validation task for an input element, as a Boolean Promise.\n */\ntype Validator = () => Promise<boolean>;\n\n/**\n * Resolves and returns the element referred by original element using ASP.NET selector logic.\n * @param elementName\n */\nfunction getRelativeFormElement(elementName: string, selector: string) {\n    // example elementName: Form.PasswordConfirm, Form.Email\n    // example selector (dafuq): *.Password, *.__RequestVerificationToken\n    // example result element name: Form.Password, __RequestVerificationToken\n\n    let realSelector = selector.substr(2); // Password, __RequestVerificationToken\n    let objectName = '';\n\n    let dotLocation = elementName.lastIndexOf('.');\n    if (dotLocation > -1) {\n        // Form\n        objectName = elementName.substr(0, dotLocation);\n\n        // Form.Password\n        let relativeElementName = objectName + '.' + realSelector;\n        let relativeElement = document.getElementsByName(relativeElementName)[0];\n        if (relativeElement) {\n            return relativeElement;\n        }\n    }\n\n    // __RequestVerificationToken\n    return document.getElementsByName(realSelector)[0];\n}\n\n/**\n * Contains default implementations for ASP.NET Core MVC validation attributes.\n */\nexport class MvcValidationProviders {\n    /**\n     * Validates whether the input has a value.\n     */\n    required: ValidationProvider = (value, element, params) => {\n        return Boolean(value);\n    }\n\n    /**\n     * Validates whether the input value satisfies the length contstraint.\n     */\n    stringLength: ValidationProvider = (value, element, params) => {\n        if (!value) {\n            return true;\n        }\n\n        if (params.min) {\n            let min = parseInt(params.min);\n            if (value.length < min) {\n                return false;\n            }\n        }\n\n        if (params.max) {\n            let max = parseInt(params.max);\n            if (value.length > max) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Validates whether the input value is equal to another input value.\n     */\n    compare: ValidationProvider = (value, element, params) => {\n        if (!params.other) {\n            return true;\n        }\n\n        let otherElement = getRelativeFormElement(element.name, params.other) as HTMLInputElement;\n        if (!otherElement) {\n            return true;\n        }\n\n        return (otherElement.value === value);\n    }\n\n    /**\n     * Validates whether the input value is a number within a given range.\n     */\n    range: ValidationProvider = (value, element, params) => {\n        if (!value) {\n            return true;\n        }\n\n        let val = parseFloat(value);\n        if (isNaN(val)) {\n            return false;\n        }\n\n        if (params.min) {\n            let min = parseFloat(params.min);\n            if (val < min) {\n                return false;\n            }\n        }\n\n        if (params.max) {\n            let max = parseFloat(params.max);\n            if (val > max) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Validates whether the input value satisfies a regular expression pattern.\n     */\n    regex: ValidationProvider = (value, element, params) => {\n        if (!value || !params.pattern) {\n            return true;\n        }\n\n        let r = new RegExp(params.pattern);\n        return r.test(value);\n    }\n\n    /**\n     * Validates whether the input value is an email in accordance to RFC822 specification, with a top level domain.\n     */\n    email: ValidationProvider = (value, element, params) => {\n        if (!value) {\n            return true;\n        }\n\n        // RFC822 email address with .TLD validation\n        // (c) Richard Willis, Chris Ferdinandi, MIT Licensed\n        // https://gist.github.com/badsyntax/719800\n        // https://gist.github.com/cferdinandi/d04aad4ce064b8da3edf21e26f8944c4\n\n        let r = /^([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22))*\\x40([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d))*(\\.\\w{2,})+$/;\n        return r.test(value);\n    }\n\n    /**\n     * Validates whether the input value is a credit card number, with Luhn's Algorithm.\n     */\n    creditcard: ValidationProvider = (value, element, params) => {\n        if (!value) {\n            return true;\n        }\n\n        // (c) jquery-validation, MIT Licensed\n        // https://github.com/jquery-validation/jquery-validation/blob/master/src/additional/creditcard.js\n        // based on https://en.wikipedia.org/wiki/Luhn_algorithm\n\n        // Accept only spaces, digits and dashes\n        if (/[^0-9 \\-]+/.test(value)) {\n            return false;\n        }\n\n        var nCheck = 0,\n            nDigit = 0,\n            bEven = false,\n            n, cDigit;\n\n        value = value.replace(/\\D/g, \"\");\n\n        // Basing min and max length on https://developer.ean.com/general_info/Valid_Credit_Card_Types\n        if (value.length < 13 || value.length > 19) {\n            return false;\n        }\n\n        for (n = value.length - 1; n >= 0; n--) {\n            cDigit = value.charAt(n);\n            nDigit = parseInt(cDigit, 10);\n            if (bEven) {\n                if ((nDigit *= 2) > 9) {\n                    nDigit -= 9;\n                }\n            }\n\n            nCheck += nDigit;\n            bEven = !bEven;\n        }\n\n        return (nCheck % 10) === 0;\n    }\n\n    /**\n     * Validates whether the input value is a URL.\n     */\n    url: ValidationProvider = (value, element, params) => {\n        if (!value) {\n            return true;\n        }\n\n        let lowerCaseValue = value.toLowerCase();\n\n        // Match the logic in `UrlAttribute`\n        return lowerCaseValue.indexOf('http://') > -1\n            || lowerCaseValue.indexOf('https://') > -1\n            || lowerCaseValue.indexOf('ftp://') > -1;\n    }\n\n    /**\n     * Validates whether the input value is a phone number.\n     */\n    phone: ValidationProvider = (value, element, params) => {\n        if (!value) {\n            return true;\n        }\n\n        // Allows whitespace or dash as number separator because some people like to do that...\n        let consecutiveSeparator = /[\\+\\-\\s][\\-\\s]/g;\n        if (consecutiveSeparator.test(value)) {\n            return false;\n        }\n\n        let r = /^\\+?[0-9\\-\\s]+$/;\n        return r.test(value);\n    }\n\n    /**\n     * Asynchronously validates the input value to a JSON GET API endpoint.\n     */\n    remote: ValidationProvider = (value, element, params) => {\n        if (!value) {\n            return true;\n        }\n\n        // params.additionalfields: *.Email,*.Username\n        let fieldSelectors: string[] = (params.additionalfields as string).split(',');\n        let fields: StringKeyValuePair = {};\n\n        for (let fieldSelector of fieldSelectors) {\n            let fieldName = fieldSelector.substr(2);\n            let fieldElement = getRelativeFormElement(element.name, fieldSelector) as HTMLInputElement;\n\n            let hasValue = Boolean(fieldElement && fieldElement.value);\n            if (!hasValue) {\n                continue;\n            }\n\n            fields[fieldName] = fieldElement.value;\n        }\n\n        let url: string = params['url'];\n\n        let encodedParams: string[] = [];\n        for (let fieldName in fields) {\n            let encodedParam = encodeURIComponent(fieldName) + '=' + encodeURIComponent(fields[fieldName]);\n            encodedParams.push(encodedParam);\n        }\n        let payload = encodedParams.join('&');\n\n        return new Promise((ok, reject) => {\n            let request = new XMLHttpRequest();\n\n            if (params.type === 'Post') {\n                let postData = new FormData();\n                for (let fieldName in fields) {\n                    postData.append(fieldName, fields[fieldName]);\n                }\n                request.open('post', url);\n                request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n                request.send(payload);\n            } else {\n                request.open('get', url + '?' + payload);\n                request.send();\n            }\n\n            request.onload = e => {\n                if (request.status >= 200 && request.status < 300) {\n                    let data = JSON.parse(request.responseText);\n                    ok(data);\n                } else {\n                    reject({\n                        status: request.status,\n                        statusText: request.statusText,\n                        data: request.responseText\n                    });\n                }\n            };\n\n            request.onerror = e => {\n                reject({\n                    status: request.status,\n                    statusText: request.statusText,\n                    data: request.responseText\n                });\n            };\n        });\n    }\n}\n\n/**\n * Responsibles for managing the DOM elements and running the validation providers.\n */\nexport class ValidationService {\n    /**\n     * A key-value collection of loaded validation plugins.\n     */\n    private providers: { [name: string]: ValidationProvider } = {};\n\n    /**\n     * A key-value collection of <span> elements for displaying validation messages for an input (by DOM ID).\n     */\n    private messageFor: { [id: string]: Element[] } = {};\n\n    /**\n     * A list of managed elements, each having a randomly assigned unique identifier (UID).\n     */\n    private elementUIDs: ElementUID[] = [];\n\n    /**\n     * A key-value collection of UID to Element for quick lookup.\n     */\n    private elementByUID: { [uid: string]: Element } = {};\n\n    /**\n     * A key-value collection of input UIDs for a <form> UID.\n     */\n    private formInputs: { [formUID: string]: string[] } = {};\n\n    /**\n     * A key-value map for input UID to its validator factory.\n     */\n    private validators: { [inputUID: string]: Validator } = {};\n\n    /**\n     * A key-value map for element UID to its trigger element (submit event for <form>, input event for <textarea> and <input>).\n     */\n    private elementEvents: { [id: string]: (e?: SubmitEvent, callback?: ValidatedCallback) => void } = {};\n\n    /**\n     * A key-value map of input UID to its validation error message.\n     */\n    private summary: StringKeyValuePair = {};\n\n    /**\n     * A serialized representation of the validation error message summary rendered to the user.\n     */\n    private renderedSummaryJSON: string;\n\n    /**\n     * In milliseconds, the rate of fire of the input validation.\n     */\n    debounce = 300;\n\n    /**\n     * Allow hidden fields validation\n     */\n    allowHiddenFields = false;\n\n    private logger: Logger;\n    observer?: MutationObserver;\n\n    constructor(logger?: Logger) {\n        this.logger = logger || nullLogger;\n    }\n\n    /**\n     * Registers a new validation plugin of the given name, if not registered yet.\n     * Registered plugin validates inputs with data-val-[name] attribute, used as error message.\n     * @param name\n     * @param callback\n     */\n    addProvider(name: string, callback: ValidationProvider) {\n        if (this.providers[name]) {\n            // First-Come-First-Serve validation plugin design.\n            // Allows developers to override the default MVC Providers by adding custom providers BEFORE bootstrap() is called!\n            return;\n        }\n        this.logger.log(\"Registered provider: %s\", name);\n        this.providers[name] = callback;\n    }\n\n    /**\n     * Registers the default providers for enabling ASP.NET Core MVC client-side validation.\n     */\n    private addMvcProviders() {\n        let mvc = new MvcValidationProviders();\n\n        // [Required]\n        this.addProvider('required', mvc.required);\n        // [StringLength], [MinLength], [MaxLength]\n        this.addProvider('length', mvc.stringLength);\n        this.addProvider('maxlength', mvc.stringLength);\n        this.addProvider('minlength', mvc.stringLength);\n        // [Compare]\n        this.addProvider('equalto', mvc.compare);\n        // [Range]\n        this.addProvider('range', mvc.range);\n        // [RegularExpression]\n        this.addProvider('regex', mvc.regex);\n        // [CreditCard]\n        this.addProvider('creditcard', mvc.creditcard);\n        // [EmailAddress]\n        this.addProvider('email', mvc.email);\n        // [Url]\n        this.addProvider('url', mvc.url);\n        // [Phone]\n        this.addProvider('phone', mvc.phone);\n        // [Remote]\n        this.addProvider('remote', mvc.remote);\n    }\n\n    /**\n     * Scans document for all validation message <span> generated by ASP.NET Core MVC, then tracks them.\n     */\n    private scanMessages(root: HTMLElement) {\n        let validationMessageElements = Array.from(root.querySelectorAll<HTMLElement>('[data-valmsg-for]'));\n\n        // querySelectorAll does not include the root element itself.\n        // we could use 'matches', but that's newer than querySelectorAll so we'll keep it simple and compatible.\n        if (root.hasAttribute(\"data-valmsg-for\")) {\n            validationMessageElements.push(root);\n        }\n\n        for (let i = 0; i < validationMessageElements.length; i++) {\n            let e = validationMessageElements[i];\n            let name = e.getAttribute('data-valmsg-for');\n\n            let spans = this.messageFor[name] || (this.messageFor[name] = []);\n            if (spans.indexOf(e) < 0) {\n                spans.push(e);\n            }\n            else {\n                this.logger.log(\"Validation element for '%s' is already tracked\", name, e);\n            }\n        }\n    }\n\n    /**\n     * Given attribute map for an HTML input, returns the validation directives to be executed.\n     * @param attributes\n     */\n    parseDirectives(attributes: NamedNodeMap) {\n        let directives: ValidationDirective = {};\n        let validationAtributes: StringKeyValuePair = {};\n\n        let cut = 'data-val-'.length;\n        for (let i = 0; i < attributes.length; i++) {\n            let a = attributes[i];\n            if (a.name.indexOf('data-val-') === 0) {\n                let key = a.name.substr(cut);\n                validationAtributes[key] = a.value;\n            }\n        }\n\n        for (let key in validationAtributes) {\n            if (key.indexOf('-') === -1) {\n                let parameters = Object.keys(validationAtributes).filter(Q => {\n                    return (Q !== key) && (Q.indexOf(key) === 0);\n                });\n\n                let directive: ValidationDirectiveBindings = {\n                    error: validationAtributes[key],\n                    params: {}\n                };\n\n                let pcut = (key + '-').length;\n                for (let i = 0; i < parameters.length; i++) {\n                    let pvalue = validationAtributes[parameters[i]];\n                    let pkey = parameters[i].substr(pcut);\n\n                    directive.params[pkey] = pvalue;\n                }\n\n                directives[key] = directive;\n            }\n        }\n\n        return directives;\n    }\n\n    /**\n     *  Returns an RFC4122 version 4 compliant GUID.\n     */\n    private guid4() {\n        // (c) broofa, MIT Licensed\n        // https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript/2117523#2117523\n\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n\n    /**\n     * Gets a UID for an DOM element.\n     * @param node\n     */\n    private getElementUID(node: Element) {\n        let x = this.elementUIDs.filter(e => {\n            return e.node === node;\n        })[0];\n\n        if (x) {\n            return x.uid;\n        }\n\n        let uid = this.guid4();\n        this.elementUIDs.push({\n            node: node,\n            uid: uid\n        });\n        this.elementByUID[uid] = node;\n        return uid;\n    }\n\n    /**\n     * Returns a Promise that returns validation result for each and every inputs within the form.\n     * @param formUID\n     */\n    private getFormValidationTask(formUID: string) {\n        let formInputUIDs = this.formInputs[formUID];\n        if (!formInputUIDs || formInputUIDs.length === 0) {\n            return Promise.resolve(true);\n        }\n\n        let formValidators: Validator[] = [];\n\n        for (let i = 0; i < formInputUIDs.length; i++) {\n            let inputUID = formInputUIDs[i];\n            formValidators.push(this.validators[inputUID]);\n        }\n\n        let tasks = formValidators.map(factory => factory());\n        return Promise.all(tasks).then(result => result.every(e => e));\n    }\n\n    /**\n     * Fires off validation for elements within the provided form and then calls the callback\n     * @param form\n     * @param callback\n     */\n    validateForm = (form: HTMLFormElement, callback?: ValidatedCallback) => {\n        let formUID = this.getElementUID(form);\n        let formValidationEvent = this.elementEvents[formUID];\n        if (formValidationEvent) {\n            formValidationEvent(undefined, callback);\n        }\n    }\n\n    /**\n     * Called before validating form submit events.\n     * Default calls `preventDefault()` and `stopImmediatePropagation()`.\n     * @param submitEvent The `SubmitEvent`.\n     */\n    preValidate = (submitEvent: SubmitEvent) => {\n        submitEvent.preventDefault();\n        submitEvent.stopImmediatePropagation();\n    }\n\n    /**\n     * Handler for validated form submit events.\n     * Default calls `submitValidForm(form, submitEvent)` on success\n     * and `focusFirstInvalid(form)` on failure.\n     * @param form The form that has been validated.\n     * @param success The validation result.\n     * @param submitEvent The `SubmitEvent`.\n     */\n    handleValidated = (form: HTMLFormElement, success: boolean, submitEvent: SubmitEvent) => {\n        if (success) {\n            this.submitValidForm(form, submitEvent);\n        }\n        else {\n            this.focusFirstInvalid(form);\n        }\n    }\n\n    /**\n     * Dispatches a new `SubmitEvent` on the provided form,\n     * then calls `form.submit()` unless `submitEvent` is cancelable\n     * and `preventDefault()` was called by a handler that received the new event.\n     *\n     * This is equivalent to `form.requestSubmit()`, but more flexible.\n     * @param form The validated form to submit\n     * @param submitEvent The `SubmitEvent`.\n     */\n    submitValidForm = (form: HTMLFormElement, submitEvent: SubmitEvent) => {\n        const newEvent = new SubmitEvent('submit', submitEvent);\n        if (form.dispatchEvent(newEvent)) {\n            form.submit();\n        }\n    }\n\n    /**\n     * Focuses the first invalid element within the provided form\n     * @param form\n     */\n    focusFirstInvalid = (form: HTMLFormElement) => {\n        let formUID = this.getElementUID(form);\n        let formInputUIDs = this.formInputs[formUID];\n        let invalidFormInputUIDs = formInputUIDs.filter(uid => this.summary[uid]);\n\n        if (invalidFormInputUIDs.length > 0) {\n            var firstInvalid = this.elementByUID[invalidFormInputUIDs[0]] as HTMLElement;\n            if (firstInvalid) {\n                firstInvalid.focus();\n            }\n        }\n    }\n\n    /**\n     * Returns true if the provided form is valid, and then calls the callback. The form will be validated before checking, unless prevalidate is set to false\n     * @param form\n     * @param prevalidate\n     * @param callback\n     * @returns\n     */\n    isValid = (form: HTMLFormElement, prevalidate: boolean = true, callback?: ValidatedCallback) => {\n        if (prevalidate) {\n            this.validateForm(form, callback);\n        }\n        let formUID = this.getElementUID(form);\n        let formInputUIDs = this.formInputs[formUID];\n        let invalidFormInputUIDs = formInputUIDs.filter(uid => this.summary[uid]);\n        return invalidFormInputUIDs.length == 0;\n    }\n\n    /**\n     * Returns true if the provided field is valid, and then calls the callback. The form will be validated before checking, unless prevalidate is set to false\n     * @param form\n     * @param prevalidate\n     * @param callback\n     * @returns\n     */\n    isFieldValid = (field: HTMLElement, prevalidate: boolean = true, callback?: ValidatedCallback) => {\n\n        if (prevalidate) {\n            let form = field.closest(\"form\");\n            if (form != null) {\n                this.validateForm(form, callback);\n            }\n        }\n\n        let fieldUID = this.getElementUID(field);\n        return this.summary[fieldUID] != null;\n    }\n\n    /**\n     * Returns true if the event triggering the form submission indicates we should validate the form.\n     * @param e\n     */\n    private shouldValidate(e?: Event) {\n        // Skip client-side validation if the form has been submitted via a button that has the \"formnovalidate\" attribute.\n        return !(e && e['submitter'] && e['submitter']['formNoValidate']);\n    }\n\n    /**\n     * Tracks a <form> element as parent of an input UID. When the form is submitted, attempts to validate the said input asynchronously.\n     * @param form\n     * @param inputUID\n     */\n    private trackFormInput(form: HTMLFormElement, inputUID: string) {\n        let formUID = this.getElementUID(form);\n        if (!this.formInputs[formUID]) {\n            this.formInputs[formUID] = [];\n        }\n        let add = (this.formInputs[formUID].indexOf(inputUID) === -1);\n        if (add) {\n            this.formInputs[formUID].push(inputUID);\n        }\n        else {\n            this.logger.log(\"Form input for UID '%s' is already tracked\", inputUID);\n        }\n\n        if (this.elementEvents[formUID]) {\n            return;\n        }\n\n        let validating = false;\n        let cb = (e?: SubmitEvent, callback?: ValidatedCallback) => {\n            // Prevent recursion\n            if (validating) {\n                return;\n            }\n\n            if (!this.shouldValidate(e)) {\n                return;\n            }\n\n            let validate = this.getFormValidationTask(formUID);\n            if (!validate) {\n                return;\n            }\n\n            //`preValidate` typically prevents submit before validation\n            if (e) {\n                this.preValidate(e);\n            }\n\n            validating = true;\n            this.logger.log('Validating', form);\n\n            validate.then(success => {\n                this.logger.log('Validated (success = %s)', success, form);\n                if (callback) {\n                    callback(success);\n                    return;\n                }\n\n                const validationEvent = new CustomEvent('validation',\n                    {\n                        detail: { valid: success }\n                    });\n                form.dispatchEvent(validationEvent);\n\n                this.handleValidated(form, success, e);\n            }).catch(error => {\n                this.logger.log('Validation error', error);\n            }).finally(() => {\n                validating = false;\n            });\n        };\n\n        form.addEventListener('submit', cb);\n        form.addEventListener('reset', e => {\n            let uids = this.formInputs[formUID];\n\n            for (let uid of uids) {\n                let input = this.elementByUID[uid] as HTMLInputElement;\n                if (input.classList.contains(this.ValidationInputCssClassName)) {\n                    input.classList.remove(this.ValidationInputCssClassName);\n                }\n                if (input.classList.contains(this.ValidationInputValidCssClassName)) {\n                    input.classList.remove(this.ValidationInputValidCssClassName);\n                }\n\n                let spans = this.messageFor[input.name];\n                if (spans) {\n                    for (let i = 0; i < spans.length; i++) {\n                        spans[i].innerHTML = '';\n                    }\n                }\n\n                delete this.summary[uid];\n            }\n            this.renderSummary();\n        });\n        this.elementEvents[formUID] = cb;\n    }\n\n    /**\n     * Adds an input element to be managed and validated by the service.\n     * Triggers a debounced live validation when input value changes.\n     * @param input\n     */\n    addInput(input: HTMLInputElement) {\n        let uid = this.getElementUID(input);\n\n        let directives = this.parseDirectives(input.attributes);\n        let validate = this.createValidator(input, directives);\n\n        this.validators[uid] = validate;\n        if (input.form) {\n            this.trackFormInput(input.form, uid);\n        }\n\n        if (this.elementEvents[uid]) {\n            return;\n        }\n\n        let delay;\n        let cb = e => {\n            let validate = this.validators[uid];\n            clearTimeout(delay);\n            delay = setTimeout(validate, this.debounce);\n        };\n\n        let isDropdown = input.tagName.toLowerCase() === 'select';\n        let validateEvent = input.dataset.valEvent;\n        if (isDropdown) {\n            input.addEventListener('change', cb);\n        } else if (validateEvent) {\n            input.addEventListener(validateEvent, cb);\n        }\n        else {\n            input.addEventListener('input', cb);\n        }\n\n        this.elementEvents[uid] = cb;\n    }\n\n    /**\n     * Scans the entire document for input elements to be validated.\n     */\n    private scanInputs(root: HTMLElement) {\n        let inputs = Array.from(root.querySelectorAll<HTMLElement>('[data-val=\"true\"]'));\n\n        // querySelectorAll does not include the root element itself.\n        // we could use 'matches', but that's newer than querySelectorAll so we'll keep it simple and compatible.\n        if (root.getAttribute(\"data-val\") === \"true\") {\n            inputs.push(root);\n        }\n\n        for (let i = 0; i < inputs.length; i++) {\n            let input = inputs[i] as HTMLInputElement;\n            this.addInput(input);\n        }\n    }\n\n    /**\n     * Returns a <ul> element as a validation errors summary.\n     */\n    createSummaryDOM() {\n        if (!Object.keys(this.summary).length) {\n            return null;\n        }\n\n        let ul = document.createElement('ul');\n        for (let key in this.summary) {\n            let li = document.createElement('li');\n            li.innerHTML = this.summary[key];\n            ul.appendChild(li);\n        }\n        return ul;\n    }\n\n    /**\n     * Displays validation summary to ASP.NET Core MVC designated elements, when it actually gets updated.\n     */\n    private renderSummary() {\n        let summaryElements = document.querySelectorAll('[data-valmsg-summary=\"true\"]');\n        if (!summaryElements.length) {\n            return;\n        }\n\n        // Using JSON.stringify for quick and painless deep compare of simple KVP. You need to sort the keys first, tho...\n        let shadow = JSON.stringify(this.summary, Object.keys(this.summary).sort());\n        if (shadow === this.renderedSummaryJSON) {\n            return;\n        }\n\n        // Prevents wasteful re-rendering of summary list element with identical items!\n        this.renderedSummaryJSON = shadow;\n        let ul = this.createSummaryDOM();\n\n        for (let i = 0; i < summaryElements.length; i++) {\n            let e = summaryElements[i];\n            e.innerHTML = '';\n            if (ul) {\n                this.swapClasses(e,\n                    this.ValidationSummaryCssClassName,\n                    this.ValidationSummaryValidCssClassName)\n                e.appendChild(ul.cloneNode(true));\n            } else {\n                this.swapClasses(e,\n                    this.ValidationSummaryValidCssClassName,\n                    this.ValidationSummaryCssClassName)\n            }\n        }\n    }\n\n    /**\n     * Adds an error message to an input element, which also updates the validation message elements and validation summary elements.\n     * @param input\n     * @param message\n     */\n    addError(input: HTMLInputElement, message: string) {\n        let spans = this.messageFor[input.name];\n        if (spans) {\n            for (let i = 0; i < spans.length; i++) {\n                spans[i].innerHTML = message;\n                this.swapClasses(spans[i],\n                    this.ValidationMessageCssClassName,\n                    this.ValidationMessageValidCssClassName);\n            }\n        }\n\n        this.swapClasses(input,\n            this.ValidationInputCssClassName,\n            this.ValidationInputValidCssClassName);\n\n        let uid = this.getElementUID(input);\n        this.summary[uid] = message;\n        this.renderSummary();\n    }\n\n    /**\n     * Removes an error message from an input element, which also updates the validation message elements and validation summary elements.\n     * @param input\n     */\n    removeError(input: HTMLInputElement) {\n        let spans = this.messageFor[input.name];\n        if (spans) {\n            for (let i = 0; i < spans.length; i++) {\n                spans[i].innerHTML = '';\n                this.swapClasses(spans[i],\n                    this.ValidationMessageValidCssClassName,\n                    this.ValidationMessageCssClassName);\n            }\n        }\n\n        this.swapClasses(input,\n            this.ValidationInputValidCssClassName,\n            this.ValidationInputCssClassName);\n\n        let uid = this.getElementUID(input);\n        delete this.summary[uid];\n        this.renderSummary();\n    }\n\n    /**\n     * Returns a validation Promise factory for an input element, using given validation directives.\n     * @param input\n     * @param directives\n     */\n    createValidator(input: HTMLInputElement, directives: ValidationDirective) {\n        return async () => {\n\n            // only validate visible fields\n            if (!this.isHidden(input)) {\n                for (let key in directives) {\n                    let directive = directives[key];\n                    let provider = this.providers[key];\n\n                    if (!provider) {\n                        this.logger.log('aspnet-validation provider not implemented: %s', key);\n                        continue;\n                    }\n                    this.logger.log(\"Running %s validator on element\", key, input);\n\n                    let result = provider(input.value, input, directive.params);\n                    let valid = false;\n                    let error = directive.error;\n\n                    if (typeof result === 'boolean') {\n                        valid = result;\n                    } else if (typeof result === 'string') {\n                        valid = false;\n                        error = result;\n                    } else {\n                        let resolution = await result;\n                        if (typeof resolution === 'boolean') {\n                            valid = resolution;\n                        } else {\n                            valid = false;\n                            error = resolution;\n                        }\n                    }\n\n                    if (!valid) {\n                        this.addError(input, error);\n                        return false;\n                    }\n                }\n            }\n\n            this.removeError(input);\n            return true;\n\n        };\n    }\n\n    /**\n     * Checks if the provided input is hidden from the browser\n     * @param input\n     * @returns\n     */\n    private isHidden(input: HTMLElement) {\n        return !(this.allowHiddenFields || input.offsetWidth || input.offsetHeight || input.getClientRects().length);\n    }\n\n    /**\n     * Adds addClass and removes removeClass\n     * @param element Element to modify\n     * @param addClass Class to add\n     * @param removeClass Class to remove\n     */\n    private swapClasses(element: Element, addClass: string, removeClass: string) {\n        if (!element.classList.contains(addClass)) {\n            element.classList.add(addClass);\n        }\n        if (element.classList.contains(removeClass)) {\n            element.classList.remove(removeClass);\n        }\n    }\n\n    /**\n     * Load default validation providers and scans the entire document when ready.\n     * @param options.watch If set to true, a MutationObserver will be used to continuously watch for new elements that provide validation directives.\n     */\n    bootstrap(options?: { watch?: boolean, root?: HTMLElement }) {\n        options = options || {};\n\n        this.addMvcProviders();\n        let document = window.document;\n        const root = options.root || document.body;\n        const init = () => {\n            this.scan(root);\n\n            // Watch for further mutations after initial scan\n            if (options.watch) {\n                this.watch(root);\n            }\n        }\n\n        // If the document is done loading, scan it now.\n        if (document.readyState === 'complete' || document.readyState === 'interactive') {\n            init();\n        }\n        else {\n            // Otherwise wait until the document is done loading.\n            document.addEventListener('DOMContentLoaded', init);\n        }\n    }\n\n    /**\n     * Scans the provided root element for any validation directives and attaches behavior to them.\n     */\n    scan(root: HTMLElement) {\n        this.logger.log('Scanning', root);\n        this.scanMessages(root);\n        this.scanInputs(root);\n    }\n\n    /**\n     * Watches the provided root element for mutations, and scans for new validation directives to attach behavior.\n     * @param root The root element to use, defaults to the document.documentElement.\n     */\n    watch(root: HTMLElement) {\n        this.observer = new MutationObserver(mutations => {\n            mutations.forEach(mutation => {\n                this.observed(mutation);\n            });\n        });\n        this.observer.observe(root, {\n            attributes: true,\n            childList: true,\n            subtree: true\n        });\n        this.logger.log(\"Watching for mutations\");\n    }\n\n    private observed(mutation: MutationRecord) {\n        if (mutation.type === 'childList') {\n            for (let i = 0; i < mutation.addedNodes.length; i++) {\n                let node = mutation.addedNodes[i];\n                this.logger.log('Added node', node);\n                if (node instanceof HTMLElement) {\n                    this.scan(node);\n                }\n            }\n        } else if (mutation.type === 'attributes') {\n            if (mutation.target instanceof HTMLElement) {\n                const oldValue = mutation.oldValue ?? '';\n                const newValue = mutation.target.attributes[mutation.attributeName]?.value ?? '';\n                this.logger.log(\"Attribute '%s' changed from '%s' to '%s'\",\n                    mutation.attributeName,\n                    oldValue,\n                    newValue,\n                    mutation.target);\n                if (oldValue !== newValue) {\n                    this.scan(mutation.target);\n                }\n            }\n        }\n    }\n\n    /**\n     * Override CSS class name for input validation error. Default: 'input-validation-error'\n     */\n    ValidationInputCssClassName = \"input-validation-error\";\n\n    /**\n     * Override CSS class name for valid input validation. Default: 'input-validation-valid'\n     */\n    ValidationInputValidCssClassName = \"input-validation-valid\";\n\n    /**\n     * Override CSS class name for field validation error. Default: 'field-validation-error'\n     */\n    ValidationMessageCssClassName = \"field-validation-error\";\n\n    /**\n     * Override CSS class name for valid field validation. Default: 'field-validation-valid'\n     */\n    ValidationMessageValidCssClassName = \"field-validation-valid\";\n\n    /**\n     * Override CSS class name for validation summary error. Default: 'validation-summary-errors'\n     */\n    ValidationSummaryCssClassName = \"validation-summary-errors\";\n\n    /**\n     * Override CSS class name for valid validation summary. Default: 'field-validation-valid'\n     */\n    ValidationSummaryValidCssClassName = \"validation-summary-valid\";\n}\n"],"sourceRoot":""}